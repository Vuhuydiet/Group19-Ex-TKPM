model Student {
  id               String           @id @default(cuid())
  name             String
  dob              DateTime
  gender           String
  facultyId        String
  faculty          Faculty          @relation(fields: [facultyId], references: [id], map: "Student_Faculty_fkey")
  academicYear     Int
  program          String
  permanentAddressId String
  permanentAddress Address          @relation("PermanentAddress", fields: [permanentAddressId], references: [id], map: "Student_PermanentAddress_fkey")
  temporaryAddressId String?
  temporaryAddress Address?         @relation("TemporaryAddress", fields: [temporaryAddressId], references: [id], map: "Student_TemporaryAddress_fkey")
  email            String           @unique
  phone            String
  statusId         String
  status           StudyStatus      @relation(fields: [statusId], references: [id], map: "Student_Status_fkey")
  identityDocumentId String?        // Ensure this field exists
  identityDocument IdentityDocument? @relation(map: "Student_IdentityDocument_fkey")
  nationality      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}